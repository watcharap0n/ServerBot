# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
name: MANGO BOT

on:
  push:
    branches: [ master ]

jobs:
  DEV:
    name: Linter and Pytest
    runs-on: ubuntu-latest
    environment: PROD

    steps: 
    
      - name: Unit Test
        env:
          GITHUB_RUN_ID: ${{ secrets.GITHUB_RUN_ID }}
          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
          GITHUB_WORKFLOW: ${{ secrets.GITHUB_WORKFLOW }}
        run: echo "$GITHUB_RUN_ID $GITHUB_REPOSITORY $GITHUB_WORKFLOW

      - uses: actions/checkout@v2
      - name: Set up Python 3.9.6
        uses: actions/setup-python@v2
        with:
          python-version: "3.9.6"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Unit Test
        env:
          channel_access_token: ${{ secrets.CHANNEL_ACCESS_TOKEN }}
          PYTHONPATH: ${{ secrets.PYTHONPATH }}
          user_testing: ${{ secrets.USER_TESTING }}
          pwd_testing: ${{ secrets.PWD_TESTING }}
          apiKey: ${{ secrets.APIKEY }}
          authDomain: ${{ secrets.AUTHDOMAIN }}
          databaseURL: ${{ secrets.DATABASEURL }}
          projectId: ${{ secrets.PROJECTID }}
          storageBucket: ${{ secrets.STORAGEBUCKET }}
          messagingSenderId: ${{ secrets.MESSAGINGSENDERID }}
          appId: ${{ secrets.APPID }}
          measurementId: ${{ secrets.MEASUREMENTID }}
          type: ${{ secrets.TYPE }}
          project_id: ${{ secrets.PROJECT_ID }}
          private_key_id: ${{ secrets.PRIVATE_KEY_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          client_email: ${{ secrets.CLIENT_EMAIL }}
          client_id: ${{ secrets.CLIENT_ID }}
          auth_uri: ${{ secrets.AUTH_URI }}
          token_uri: ${{ secrets.TOKEN_URI }}
          auth_provider_x509_cert_url: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
          client_x509_cert_url: ${{ secrets.CLIENT_X509_CERT_URL }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          BOT_LINE: ${{ secrets.BOT_LINE }}
          GITHUB_RUN_ID: ${{ secrets.GITHUB_RUN_ID }}
          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
          GITHUB_WORKFLOW: ${{ secrets.GITHUB_WORKFLOW }}

        run: |
          echo "$GITHUB_ACTION_PATH"
          pytest -v

  DockerImage:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    environment: Docker
    needs: DEV
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/ServerBot

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  DeploymentServer:
    name: Deploy Server on Heroku Container
    runs-on: ubuntu-latest
    environment: Server
    needs: DEV
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      APP_NAME: ${{ secrets.HEROKU_SERVER_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker build
        run: |
          pip list
          docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com


      - name: Publish
        run: |
          heroku container:push web -a $APP_NAME
          heroku container:release web -a $APP_NAME

  DeploymentClinet:
    name: Deploy Client on Heroku Git
    runs-on: ubuntu-latest
    environment: Client
    needs: DeploymentServer

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Publish
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_CLIENT_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
   
